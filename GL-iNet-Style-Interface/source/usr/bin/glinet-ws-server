#!/usr/bin/env lua
-- GL.iNet Style Interface WebSocket Server
-- glinet-ws-server - Real-time data streaming

local socket = require "socket"
local nixio = require "nixio"
local json = require "luci.jsonc"
local uci = require "luci.model.uci".cursor()
local sys = require "luci.sys"

-- Load models
local system_model = require "luci.model.glinet.system"
local network_model = require "luci.model.glinet.network"
local auth = require "luci.model.glinet.auth"

-- Configuration
local WS_PORT = 8081
local UPDATE_INTERVAL = 2  -- seconds
local PING_INTERVAL = 30   -- seconds

-- WebSocket magic string for handshake
local WS_MAGIC = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11"

-- Connected clients
local clients = {}

-- Base64 encoding
local function base64_encode(data)
    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    return ((data:gsub('.', function(x) 
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end

-- SHA1 hashing
local function sha1(msg)
    local h0 = 0x67452301
    local h1 = 0xEFCDAB89
    local h2 = 0x98BADCFE
    local h3 = 0x10325476
    local h4 = 0xC3D2E1F0
    
    local msg_len = #msg
    local msg_len_in_bits = msg_len * 8
    
    msg = msg .. string.char(0x80)
    msg = msg .. string.rep(string.char(0), (64 - ((msg_len + 1 + 8) % 64)) % 64)
    
    for i = 8, 1, -1 do
        msg = msg .. string.char(math.floor(msg_len_in_bits / 2^((i - 1) * 8)) % 256)
    end
    
    for chunk_start = 1, #msg, 64 do
        local w = {}
        
        for i = 1, 16 do
            w[i] = 0
            for j = 0, 3 do
                w[i] = w[i] * 256 + string.byte(msg, chunk_start + (i-1)*4 + j)
            end
        end
        
        for i = 17, 80 do
            w[i] = bit.lshift(bit.bxor(bit.bxor(bit.bxor(w[i-3], w[i-8]), w[i-14]), w[i-16]), 1)
        end
        
        local a = h0
        local b = h1
        local c = h2
        local d = h3
        local e = h4
        
        for i = 1, 80 do
            local f, k
            if i <= 20 then
                f = bit.bor(bit.band(b, c), bit.band(bit.bnot(b), d))
                k = 0x5A827999
            elseif i <= 40 then
                f = bit.bxor(bit.bxor(b, c), d)
                k = 0x6ED9EBA1
            elseif i <= 60 then
                f = bit.bor(bit.bor(bit.band(b, c), bit.band(b, d)), bit.band(c, d))
                k = 0x8F1BBCDC
            else
                f = bit.bxor(bit.bxor(b, c), d)
                k = 0xCA62C1D6
            end
            
            local temp = (bit.lshift(a, 5) + f + e + k + w[i]) % 2^32
            e = d
            d = c
            c = bit.lshift(b, 30)
            b = a
            a = temp
        end
        
        h0 = (h0 + a) % 2^32
        h1 = (h1 + b) % 2^32
        h2 = (h2 + c) % 2^32
        h3 = (h3 + d) % 2^32
        h4 = (h4 + e) % 2^32
    end
    
    return string.char(math.floor(h0/2^24)%256, math.floor(h0/2^16)%256, math.floor(h0/2^8)%256, h0%256,
                      math.floor(h1/2^24)%256, math.floor(h1/2^16)%256, math.floor(h1/2^8)%256, h1%256,
                      math.floor(h2/2^24)%256, math.floor(h2/2^16)%256, math.floor(h2/2^8)%256, h2%256,
                      math.floor(h3/2^24)%256, math.floor(h3/2^16)%256, math.floor(h3/2^8)%256, h3%256,
                      math.floor(h4/2^24)%256, math.floor(h4/2^16)%256, math.floor(h4/2^8)%256, h4%256)
end

-- WebSocket handshake
local function websocket_handshake(client, request)
    local key = request:match("Sec%-WebSocket%-Key: ([^\r\n]+)")
    if not key then
        return false
    end
    
    local accept = base64_encode(sha1(key .. WS_MAGIC))
    
    local response = "HTTP/1.1 101 Switching Protocols\r\n" ..
                    "Upgrade: websocket\r\n" ..
                    "Connection: Upgrade\r\n" ..
                    "Sec-WebSocket-Accept: " .. accept .. "\r\n" ..
                    "\r\n"
    
    client:send(response)
    return true
end

-- WebSocket frame encoding
local function websocket_encode(data)
    local len = #data
    local frame = string.char(0x81)  -- FIN=1, opcode=1 (text)
    
    if len <= 125 then
        frame = frame .. string.char(len)
    elseif len <= 65535 then
        frame = frame .. string.char(126)
        frame = frame .. string.char(math.floor(len / 256), len % 256)
    else
        frame = frame .. string.char(127)
        for i = 7, 0, -1 do
            frame = frame .. string.char(math.floor(len / 2^(i*8)) % 256)
        end
    end
    
    return frame .. data
end

-- WebSocket frame decoding
local function websocket_decode(data)
    if #data < 2 then
        return nil, "Incomplete frame"
    end
    
    local byte1 = string.byte(data, 1)
    local byte2 = string.byte(data, 2)
    
    local fin = bit.band(byte1, 0x80) == 0x80
    local opcode = bit.band(byte1, 0x0F)
    local masked = bit.band(byte2, 0x80) == 0x80
    local payload_len = bit.band(byte2, 0x7F)
    
    local pos = 3
    
    if payload_len == 126 then
        if #data < 4 then
            return nil, "Incomplete frame"
        end
        payload_len = string.byte(data, 3) * 256 + string.byte(data, 4)
        pos = 5
    elseif payload_len == 127 then
        if #data < 10 then
            return nil, "Incomplete frame"
        end
        payload_len = 0
        for i = 0, 7 do
            payload_len = payload_len * 256 + string.byte(data, 3 + i)
        end
        pos = 11
    end
    
    local mask_key
    if masked then
        if #data < pos + 3 then
            return nil, "Incomplete frame"
        end
        mask_key = data:sub(pos, pos + 3)
        pos = pos + 4
    end
    
    if #data < pos + payload_len - 1 then
        return nil, "Incomplete frame"
    end
    
    local payload = data:sub(pos, pos + payload_len - 1)
    
    if masked then
        local unmasked = {}
        for i = 1, #payload do
            local j = (i - 1) % 4 + 1
            unmasked[i] = string.char(bit.bxor(string.byte(payload, i), string.byte(mask_key, j)))
        end
        payload = table.concat(unmasked)
    end
    
    return {
        fin = fin,
        opcode = opcode,
        payload = payload
    }, nil, pos + payload_len - 1
end

-- Get system status data
local function get_system_status()
    return {
        type = "system_status",
        timestamp = os.time(),
        data = {
            cpu_usage = system_model.get_cpu_usage(),
            memory = system_model.get_memory_info(),
            uptime = system_model.get_uptime_seconds(),
            load = { sys.loadavg() }
        }
    }
end

-- Get network status data
local function get_network_status()
    return {
        type = "network_status",
        timestamp = os.time(),
        data = {
            traffic = network_model.get_realtime_traffic(),
            wan_status = network_model.get_wan_status(),
            connected_clients = network_model.get_connected_clients_count()
        }
    }
end

-- Get client list
local function get_client_list()
    return {
        type = "client_list",
        timestamp = os.time(),
        data = network_model.get_connected_clients()
    }
end

-- Send data to client
local function send_to_client(client, data)
    local success, err = pcall(function()
        local json_data = json.stringify(data)
        local frame = websocket_encode(json_data)
        client.socket:send(frame)
    end)
    
    if not success then
        print("Error sending to client:", err)
        return false
    end
    
    return true
end

-- Broadcast data to all clients
local function broadcast_data(data)
    local disconnected = {}
    
    for i, client in ipairs(clients) do
        if not send_to_client(client, data) then
            table.insert(disconnected, i)
        end
    end
    
    -- Remove disconnected clients
    for i = #disconnected, 1, -1 do
        table.remove(clients, disconnected[i])
    end
end

-- Handle client message
local function handle_client_message(client, message)
    local msg = json.parse(message)
    if not msg then
        return
    end
    
    if msg.type == "auth" then
        -- Verify authentication token
        local user, err = auth.verify_token(msg.token)
        if user then
            client.authenticated = true
            client.user = user
            send_to_client(client, {
                type = "auth_result",
                success = true,
                user = user.username
            })
        else
            send_to_client(client, {
                type = "auth_result",
                success = false,
                error = err
            })
        end
    elseif msg.type == "subscribe" then
        if not client.authenticated then
            send_to_client(client, {
                type = "error",
                error = "Not authenticated"
            })
            return
        end
        
        -- Subscribe to specific data types
        client.subscriptions = msg.channels or {"system", "network"}
        send_to_client(client, {
            type = "subscribed",
            channels = client.subscriptions
        })
    elseif msg.type == "ping" then
        send_to_client(client, {
            type = "pong",
            timestamp = os.time()
        })
    end
end

-- Handle client connection
local function handle_client(client_socket)
    client_socket:settimeout(0.1)
    
    -- Read HTTP request
    local request = ""
    local line
    repeat
        line = client_socket:receive()
        if line then
            request = request .. line .. "\r\n"
        end
    until not line or line == ""
    
    -- Perform WebSocket handshake
    if not websocket_handshake(client_socket, request) then
        client_socket:close()
        return
    end
    
    -- Add client to list
    local client = {
        socket = client_socket,
        authenticated = false,
        subscriptions = {},
        last_ping = os.time()
    }
    
    table.insert(clients, client)
    
    print("WebSocket client connected")
    
    -- Send initial data
    send_to_client(client, {
        type = "welcome",
        version = "1.0.0",
        server_time = os.time()
    })
end

-- Main server loop
local function main()
    -- Create server socket
    local server = socket.bind("*", WS_PORT)
    if not server then
        print("Failed to bind to port " .. WS_PORT)
        os.exit(1)
    end
    
    server:settimeout(0.1)
    
    print("GL.iNet WebSocket server listening on port " .. WS_PORT)
    
    local last_update = 0
    local last_ping = 0
    
    while true do
        -- Accept new connections
        local client_socket = server:accept()
        if client_socket then
            handle_client(client_socket)
        end
        
        -- Handle existing clients
        local disconnected = {}
        
        for i, client in ipairs(clients) do
            local data, err = client.socket:receive()
            
            if data then
                -- Parse WebSocket frames
                local frame, err, consumed = websocket_decode(data)
                if frame then
                    if frame.opcode == 0x08 then  -- Close frame
                        client.socket:close()
                        table.insert(disconnected, i)
                    elseif frame.opcode == 0x09 then  -- Ping frame
                        -- Send pong
                        local pong = string.char(0x8A) .. string.char(#frame.payload) .. frame.payload
                        client.socket:send(pong)
                    elseif frame.opcode == 0x01 then  -- Text frame
                        handle_client_message(client, frame.payload)
                    end
                end
            elseif err == "closed" then
                table.insert(disconnected, i)
            end
        end
        
        -- Remove disconnected clients
        for i = #disconnected, 1, -1 do
            print("Client disconnected")
            table.remove(clients, disconnected[i])
        end
        
        -- Send periodic updates
        local now = os.time()
        
        if now - last_update >= UPDATE_INTERVAL then
            -- Send system status
            for _, client in ipairs(clients) do
                if client.authenticated and client.subscriptions then
                    if table.contains(client.subscriptions, "system") then
                        send_to_client(client, get_system_status())
                    end
                    
                    if table.contains(client.subscriptions, "network") then
                        send_to_client(client, get_network_status())
                    end
                    
                    if table.contains(client.subscriptions, "clients") then
                        send_to_client(client, get_client_list())
                    end
                end
            end
            
            last_update = now
        end
        
        -- Send ping to keep connections alive
        if now - last_ping >= PING_INTERVAL then
            for _, client in ipairs(clients) do
                local ping = string.char(0x89, 0x00)  -- Ping frame with empty payload
                client.socket:send(ping)
            end
            
            last_ping = now
        end
        
        -- Small delay to prevent CPU hogging
        nixio.nanosleep(0, 50000000)  -- 50ms
    end
end

-- Helper function
function table.contains(table, element)
    for _, value in pairs(table) do
        if value == element then
            return true
        end
    end
    return false
end

-- Start server
main()